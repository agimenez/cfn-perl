#!/usr/bin/env perl

use strict;
use warnings;
use Cfn;

use utf8;
binmode(STDOUT, ":utf8");

my $docs_base = 'http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide';
my $index_url = "$docs_base/aws-template-resource-type-ref.html";

use v5.10;
use Mojo::UserAgent;
use Data::Printer;
use Test::More;
use Test::Exception;
use Term::ANSIColor;
use String::Util qw(trim);

my $ua = Mojo::UserAgent->new;

my $not_really_resources = {
  'AWS::CloudFormation::Init'      => 'Its a metadata key',
  'AWS::CloudFormation::Interface' => 'Its a metadata key',
};
my $resources_without_properties = {
  'AWS::CloudFormation::WaitConditionHandle' => 1,
};

sub say_ok { my $message = shift; say color('green')     , "  \x{2714} ", color('reset'), $message }
sub say_ko { my $message = shift; say color('bright_red'), "!!\x{2715} ", color('reset'), $message }

my $resource_types = $ua->get($index_url)->res->dom->find('div[class=highlights] ul')->first->find('li')->map(sub {
  return { link => $_[0]->find('a')->first->attr('href'), class => $_[0]->find('a')->first->text  }
});

$resource_types->each(sub {
  get_class_def($_);
});

Mojo::IOLoop->start unless Mojo::IOLoop->is_running;

sub get_class_def {
  my $res = shift;
  my $class = $res->{ class };

  $class = trim($class);

  if ($not_really_resources->{ $class }) {
    say_ok "Not testing $class: $not_really_resources->{ $class }";
    return;
  }

  my $class_name;
  eval {
    $class_name = Cfn->load_resource_module($class);
  };
  if ($@) {
    say_ko "Class for $class didn't load";
    # Don't continue
    return;
  } else {
    say_ok "Class for $class loads correctly";
  }

  my $url = "$docs_base/$res->{ link }";
  $ua->get($url, sub {
    my ($ua, $result) = @_;
    my $var_list_container = $result->res->dom->find('div[class=variablelist]')->first;

    if ($resources_without_properties->{ $res->{ class } } and not defined $var_list_container) {
      say_ok "  $class has no properties";
      # Don't continue
      return;
    } else {
      say_ko "Can't find variable list for $class in $url" if (not defined $var_list_container);
    }

    my $var_list = $ua->get($url)->res->dom->find('div[class=variablelist]')->first->find('dl');

    use Data::Dumper;
    my $current_att;

    my $list = $var_list
                 ->map(sub { $_->find('dt span[class=term] code') })
                 ->flatten
                 ->map(sub{ $_->text })
                 ->flatten;

    $list->each(sub {
      my $att_name = $_;
      chomp $att_name;
      my $props = $class_name->meta->find_attribute_by_name('Properties')->type_constraint->name;
  
      if (my $att = $props->meta->find_attribute_by_name($att_name)) {
        say_ok "  property $att_name in $class";
      } else {
        say_ko "  property $att_name in $class";
      }
    });
  });
}

done_testing;

# [% c.name %] generated from spec [% c.spec_version %]
use Moose::Util::TypeConstraints;

coerce 'Cfn::Resource::Properties::[% c.name %]',
  from 'HashRef',
   via { Cfn::Resource::Properties::[% c.name %]->new( %$_ ) };

package Cfn::Resource::[% c.name %] {
  use Moose;
  extends 'Cfn::Resource';
  has Properties => (isa => 'Cfn::Resource::Properties::[% c.name %]', is => 'rw', coerce => 1);
  
  sub AttributeList {
    [ [% FOR attribute = c.attribute_list %]'[% attribute.name %]'[% ',' IF (NOT loop.last) %][% END %] ]
  }
  sub supported_regions {
    [ [% FOR region = c.region_list %]'[% region %]'[% ',' IF (NOT loop.last) %][% END %] ]
  }
  [%- SWITCH c.name %]
  [% CASE 'AWS::IAM::Role' %]
  sub addPolicy {
    my ($self, @args) = @_;
    require Moose::Util::TypeConstraints;
    my @policies = map { Moose::Util::TypeConstraints::find_type_constraint('Cfn::Value')->coerce($_) } @args;
    push @{ $self->Properties->Policies->Value }, @policies;
  }
  [% CASE 'AWS::IAM::Policy' %]
  sub addStatement {
    my ($self, @args) = @_;
    require Moose::Util::TypeConstraints;
    my @statements = map { Moose::Util::TypeConstraints::find_type_constraint('Cfn::Value')->coerce($_) } @args;
    push @{ $self->Properties->PolicyDocument->Value->{Statement}->Value }, @statements;
  }
  [% END %]
}

[% FOREACH subtype_name IN c.ordered_subtypes; subtype = c.subtypes_by_cfn_type.$subtype_name %]
[% IF (subtype.is_in_array) -%]
subtype 'ArrayOfCfn::Resource::Properties::[% subtype.cfn_type %]',
     as 'Cfn::Value',
  where { $_->isa('Cfn::Value::Array') or $_->isa('Cfn::Value::Function') },
message { "$_ is not a Cfn::Value or a Cfn::Value::Function" };

coerce 'ArrayOfCfn::Resource::Properties::[% subtype.cfn_type %]',
  from 'HashRef',
   via {
     if (my $f = Cfn::TypeLibrary::try_function($_)) {
       return $f
     } else {
       die 'Only accepts functions'; 
     }
   },
  from 'ArrayRef',
   via {
     Cfn::Value::Array->new(Value => [
       map { 
         Moose::Util::TypeConstraints::find_type_constraint('Cfn::Resource::Properties::[% subtype.cfn_type %]')->coerce($_)
       } @$_
     ]);
   };
[% END # of is_in_array -%]
[% IF (subtype.is_in_map) %]
subtype 'MapOfCfn::Resource::Properties::[% subtype.cfn_type %]',
     as 'Cfn::Value',
  where { $_->isa('Cfn::Value::Hash') or $_->isa('Cfn::Value::Function') },
message { "$_ is not a Cfn::Value or a Cfn::Value::Function" };

coerce 'MapOfCfn::Resource::Properties::[% subtype.cfn_type %]',
  from 'HashRef',
   via {
     my $arg = $_;
     if (my $f = Cfn::TypeLibrary::try_function($arg)) {
       return $f
     } else {
       Cfn::Value::Hash->new(Value => {
         map { $_ => Moose::Util::TypeConstraints::find_type_constraint('Cfn::Resource::Properties::[% subtype.cfn_type %]')->coerce($arg->{$_}) } keys %$arg
       });
     }
   };
[% END # of is_in_map %]
subtype 'Cfn::Resource::Properties::[% subtype.cfn_type %]',
     as 'Cfn::Value';

coerce 'Cfn::Resource::Properties::[% subtype.cfn_type %]',
  from 'HashRef',
   via {
     if (my $f = Cfn::TypeLibrary::try_function($_)) {
       return $f
     } else {
       return Cfn::Resource::Properties::Object::[% subtype.class_name %]->new( %$_ );
     }
   };

package Cfn::Resource::Properties::Object::[% subtype.cfn_type %] {
  use Moose;
  use MooseX::StrictConstructor;
  extends 'Cfn::Value::TypedValue';
  [% FOR property_name = subtype.properties.keys.sort; property = subtype.properties.${ property_name } %]
  has [% property.name %] => (isa => '[% property.cfn_type %]', is => 'rw', coerce => 1[% IF (property.required) %], required => 1[% END %], traits => [ 'CfnMutability' ], mutability => '[% property.mutability_role %]');
  [%- END %]
}
[%- END # of foreach subtype %]

package Cfn::Resource::Properties::[% c.name %] {
  use Moose;
  use MooseX::StrictConstructor;
  extends 'Cfn::Resource::Properties';
  [% FOR property = c.property_list %]
  has [% property.name %] => (isa => '[% property.cfn_type %]', is => 'rw', coerce => 1[% IF (property.required) %], required => 1[% END %], traits => [ 'CfnMutability' ], mutability => '[% property.mutability_role %]');
  [%- END %]
}

1;
### main pod documentation begin ###

=encoding UTF-8

=head1 NAME

Cfn::Resource::[% c.name %] - Cfn resource for [% c.name %]

=head1 DESCRIPTION

This module implements a Perl module that represents the CloudFormation object [% c.name %].

See L<Cfn> for more information on how to use it.

=head1 AUTHOR

    Jose Luis Martinez
    CAPSiDE
    jlmartinez@capside.com

=head1 COPYRIGHT and LICENSE

Copyright (c) 2013 by CAPSiDE
This code is distributed under the Apache 2 License. The full text of the 
license can be found in the LICENSE file included with this module.

=cut
